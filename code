#读取数据
import xlrd
import numpy as np
import pandas as pd

df_full = pd.read_csv("./基酒数据(全特征).csv")
df_40 = pd.read_csv("./基酒数据(40个特征).csv")
df_14 = pd.read_csv("./基酒数据(14个特征).csv")
df_8 = pd.read_csv("./基酒数据(8个特征).csv")

df_full.set_index('Unnamed: 0',inplace = True)
df_40.set_index('Unnamed: 0',inplace = True)
df_14.set_index('Unnamed: 0',inplace = True)
df_8.set_index('Unnamed: 0',inplace = True)

#分成训练集和测试集，对训练集进行交叉检验
import xgboost as xgb
from xgboost import XGBRegressor
from xgboost import plot_importance
import matplotlib.pyplot as plt
import numpy as np
from sklearn.model_selection import cross_validate   
from sklearn.model_selection import GridSearchCV   
from sklearn.metrics import mean_squared_error,r2_score
from matplotlib.pylab import rcParams
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import cross_val_predict,cross_val_score
from sklearn import metrics

#全部特征数据集
list1 = []
target = "Group"
predictors = [x for x in df_full.columns if x not in [target]]
X = df_full[predictors]
Y = df_full[target]
X_train,X_val,y_train,y_val = train_test_split(X,Y,test_size=0.2,random_state= 123)
model = XGBRegressor()
predicted = cross_val_score(model,X_train,y_train,cv = 10,scoring="r2")
list1.append(np.mean(predicted))

#40个参数
target = "Group"
predictors = [x for x in df_40.columns if x not in [target]]
X = df_40[predictors]
Y = df_40[target]
X_train,X_val,y_train,y_val = train_test_split(X,Y,test_size=0.2,random_state= 123)
model = XGBRegressor()
predicted = cross_val_score(model,X_train,y_train,cv = 10,scoring="r2")
list1.append(np.mean(predicted))

#14个参数
target = "Group"
predictors = [x for x in df_14.columns if x not in [target]]
X = df_14[predictors]
Y = df_14[target]
X_train,X_val,y_train,y_val = train_test_split(X,Y,test_size=0.2,random_state= 123)
model = XGBRegressor()
predicted = cross_val_score(model,X_train,y_train,cv = 10,scoring="r2")
list1.append(np.mean(predicted))

#8个参数
target = "Group"
predictors = [x for x in df_8.columns if x not in [target]]
X = df_8[predictors]
Y = df_8[target]
model = XGBRegressor()
X_train,X_val,y_train,y_val = train_test_split(X,Y,test_size=0.2,random_state= 123)
predicted = cross_val_score(model,X_train,y_train,cv = 10,scoring="r2")
list1.append(np.mean(predicted))

#绘制各测试集10倍交叉检验结果
plt.rcParams['font.family'] = 'Heiti TC'
plt.figure(figsize = (10,5),dpi = 300)
plt.bar(range(4),list1,color = "skyblue")
plt.title("XGboost回归选取不同特征大小训练集10倍交叉检验$\mathregular{R^2}$",size = 15)
plt.xticks(range(4),["全特征","40个特征","14个特征","8个特征"],rotation = 45,size =12)
plt.yticks(np.arange(0.5,1.05,0.1))
plt.ylim(0.5,1.1)
for xx, yy in zip(range(4),list1):
    plt.text(xx, yy+0.005, "%.3f"%np.float(yy), ha='center')
plt.show()

#特征筛选
from sklearn.feature_selection import SelectKBest,chi2,f_classif,mutual_info_classif,SelectPercentile,f_regression, mutual_info_regression

#定义筛选函数
def model_r2_score(p):
    target = "Group"
    predictors = [x for x in df_full.columns if x not in [target]]
    X = df_full.loc[:,predictors]
    X_indices = np.arange(X.shape[-1]) 
    Y = df_full.loc[:,target]
    a = {}
    for i,k in enumerate(df_full.columns):
        a[i] = k
    #2.1.1.1 f_regression
    selector2_1_1 = SelectKBest(f_regression, k=p)
    selector2_1_1.fit(X_train,y_train)
    list1 = X.columns[X_indices[selector2_1_1.get_support()]]

    #2.1.1.2 mutual_info_regression
    selector2_1_2 = SelectKBest(mutual_info_regression, k=p)
    selector2_1_2.fit(X_train, y_train)
    list2 = X.columns[X_indices[selector2_1_2.get_support()]]
    
    #2.3.2 Tree-based feature selection
    from sklearn.ensemble import ExtraTreesRegressor
    # Build a forest and compute the feature importances
    forest = ExtraTreesRegressor(n_estimators=250,
                                  random_state=0)

    forest.fit(X_train, y_train)
    importances = forest.feature_importances_
    indices = np.argsort(importances)[::-1]
    list3= []
    for i in indices[:p]:
        list3.append(a[i])
    a = [x for x in list1 if x in list2] 
    b = [x for x in a if x in list3]
    X_1 = X_train.loc[:,b]
    Y_1 = y_train
    model = XGBRegressor()
    predicted = cross_val_score(model,X_1,Y_1,cv = 10,scoring="r2")
    return np.mean(predicted),b

list4={}
for i in range(25,81):
    list4[i] = model_r2_score(i)[0]
list5 = list(list4.values())

#绘制特征筛选柱状图
plt.rcParams['font.family'] = 'Heiti TC'
plt.figure(figsize=(30,10),dpi = 300)
plt.bar(np.arange(25,81), list5)
plt.xticks(np.arange(25,81),size = 12)
plt.suptitle("训练集10倍交叉检验$\mathregular{R^2}$",size=30,c = "red")
plt.title("三种特征筛选方法选取前25-80特征",size=18,loc = "right")
plt.yticks(np.arange(0,1.05,0.05))
plt.ylim(0,1.1)
for xx, yy in zip(np.arange(25,81),list5):
    plt.text(xx, yy+0.005, "%.2f"%np.float(yy), ha='center')
plt.show()

#将最好的一组取出取交集
list_6 = model_r2_score(58)[1]
list_5 = [a_1[12],a_1[29],a_1[33],a_1[43],a_1[57],a_1[59],a_1[68],a_1[70],a_1[76],a_1[80],a_1[87]]
list_7 = [x for x  in list_5 if x not in list_6]

#定义特征迭代函数
from itertools import combinations
def combine(temp_list,n):
    temp_list2 = []
    for c in combinations(temp_list,n):
        temp_list2.append(c)
    return temp_list2

#获得添加另外特征的列表
from itertools import combinations
def combine(temp_list,n):
    temp_list2 = []
    for c in combinations(temp_list,n):
        temp_list2.append(c)
    return temp_list2

list6 = []
for i in end_list:
    list_8 = list_6.copy()
    for k in i:
        list_8.append(k)
    list6.append(list_8)

list7 = []
for i in list6:
    X_1 = X_train[i]
    Y_1 = y_train
    model = XGBRegressor()
    predicted = cross_val_score(model,X_1,Y_1,cv = 10,scoring = "r2")
    r2_score = np.mean(predicted)
    list7.append(r2_score)

a = {}
for i,k in zip(end_list,list7):
    a[str(i)] = k

a[""] = model_r2_score(57)[0]
a["已有物质"] = a[""]
del a[""]

#绘制额外添加其他物质作为特征对训练集10倍交叉检验的柱状图
plt.figure(figsize=(23,10),dpi = 300)
plt.bar(range(len(a)),a.values(),color = "gray")
plt.xticks(range(len(a)),["十二酸乙酯","2,6-二叔丁基-4-甲基苯酚",
                          "十二酸乙酯\n2,6-二叔丁基-4-甲基苯酚",
                          "已有物质"],rotation = 0,size = 12,color = "navy")
plt.ylim(0.4,1.1)
plt.yticks(np.arange(0,1.05,0.05))
plt.suptitle("训练集额外添加其他物质10倍交叉检验$\mathregular{R^2}$",size = 20,color ="red")
plt.title("额外添加其他关键物质作为特征",loc = "right",size = 15)
for xx, yy in zip(range(len(a)),a.values()):
    plt.text(xx, yy+0.01, "%.5f"%np.float(yy), ha='center')
plt.show()

#将训练好的模型对测试集进行最后的验证
list6.append(list_6)
target = "Group"
df_full_1 = df_full[list6[0]]
df_full_2 = df_full[list6[1]]
df_full_3 = df_full[list6[2]]
df_full_4 = df_full[list6[3]]
y = df_full[target]

import scipy

#定义拟合函数散点图函数
def regression_plot_1(i):
    X = df_full[list6[i]]
    y = df_full[target]
    X_train,X_val,y_train,y_val = train_test_split(X,y,test_size=0.2,random_state= 123)
    model = XGBRegressor()
    model.fit(X_train,y_train)
    y_val_predict = model.predict(X_val)
    plt.figure(figsize = (5,3),dpi = 300)
    plt.scatter(y_val,y_val_predict,color = "b",alpha = 0.5,s = 25)
    slope, intercept, r_value, p_value, std_err = scipy.stats.linregress(y_val,y_val_predict)
    print(slope,intercept)
    plt.plot([0,24],[intercept,24*slope+intercept],color='navy',linestyle='-.', linewidth=1.5,alpha = 0.5)
    plt.text(5,10, "拟合曲线:y={0:.3f}x +{0:.3f}".format(slope,intercept), rotation = 26.5,size = 10,\
            family = "fantasy", color = "r", style = "italic", weight = "light",\
            bbox = dict(facecolor = "b", alpha = 0.2))
    plt.text(0, 22, "MSE:{0:.5f}".format(mean_squared_error(y_val,y_val_predict)), size = 12,\
            family = "fantasy", color = "r", style = "italic", weight = "light",\
            bbox = dict(facecolor = "b", alpha = 0.2))
    plt.text(0, 18, "R2:{0:.5f}".format(r_value**2,multioutput= 'uniform_average'), size = 12,\
            family = "fantasy", color = "r", style = "italic", weight = "light",\
            bbox = dict(facecolor = "b", alpha = 0.2))
    plt.ylim(-2,25)·
    plt.show()

#绘图
for i in range(4):
    plt.rcParams['font.family'] = 'Heiti TC'
    regression_plot_1(i)

#最终图
fig = plt.figure(figsize = (10,10),dpi = 300)
fig.suptitle("各特征训练模型测试结果展示",color = "r",size = 20)
ax1 = plt.subplot(2, 2, 1)
X_1 = df_full[list6[0]]
y = df_full[target]
X_train,X_val,y_train,y_val = train_test_split(X_1,y,test_size=0.2,random_state= 123)
model = XGBRegressor()
model.fit(X_train,y_train)
y_val_predict = model.predict(X_val)
plt.title("额外添加特征：十二酸乙酯",size = 10,loc = "right")
plt.scatter(y_val,y_val_predict,color = "b",alpha = 0.5,s = 25)
slope, intercept, r_value, p_value, std_err = scipy.stats.linregress(y_val,y_val_predict)
print(slope,intercept)
plt.plot([0,24],[intercept,24*slope+intercept],color='navy',linestyle='-.', linewidth=1.5,alpha = 0.5)
plt.text(8,12, "y ={0:.5f}x +{0:.5f}".format(slope,intercept), rotation = 43,size = 10,\
        family = "fantasy", color = "r", style = "italic", weight = "light",\
        bbox = dict(facecolor = "b", alpha = 0.2))
plt.text(0, 22, "MSE:{0:.5f}".format(mean_squared_error(y_val,y_val_predict)), size = 12,\
        family = "fantasy", color = "r", style = "italic", weight = "light",\
        bbox = dict(facecolor = "b", alpha = 0.2))
plt.text(0, 18, "$\mathregular{R^2}$:0.98725", size = 12,\
        family = "fantasy", color = "r", style = "italic", weight = "light",\
        bbox = dict(facecolor = "b", alpha = 0.2))
plt.text(-2,26,"A",size = 15)
plt.ylim(-2,25)
ax2 = plt.subplot(2, 2, 2)
X_1 = df_full[list6[1]]
y = df_full[target]
X_train,X_val,y_train,y_val = train_test_split(X_1,y,test_size=0.2,random_state= 123)
model = XGBRegressor()
model.fit(X_train,y_train)
y_val_predict = model.predict(X_val)
plt.title("额外添加特征：2,6-二叔丁基-4-甲基苯酚",size = 10,loc = "right")
plt.scatter(y_val,y_val_predict,color = "b",alpha = 0.5,s = 25)
slope, intercept, r_value, p_value, std_err = scipy.stats.linregress(y_val,y_val_predict)
print(slope,intercept)
plt.plot([0,24],[intercept,24*slope+intercept],color='navy',linestyle='-.', linewidth=1.5,alpha = 0.5)
plt.text(8,12, "y ={0:.5f}x +{0:.5f}".format(slope,intercept), rotation = 43,size = 10,\
        family = "fantasy", color = "r", style = "italic", weight = "light",\
        bbox = dict(facecolor = "b", alpha = 0.2))
plt.text(0, 22, "MSE:{0:.5f}".format(mean_squared_error(y_val,y_val_predict)), size = 12,\
        family = "fantasy", color = "r", style = "italic", weight = "light",\
        bbox = dict(facecolor = "b", alpha = 0.2))
plt.text(0, 18,  "$\mathregular{R^2}$:0.98722", size = 12,\
        family = "fantasy", color = "r", style = "italic", weight = "light",\
        bbox = dict(facecolor = "b", alpha = 0.2))
plt.text(-2,26,"B",size = 15)
plt.ylim(-2,25)
ax3 = plt.subplot(2, 2, 3)
X_1 = df_full[list6[2]]
y = df_full[target]
X_train,X_val,y_train,y_val = train_test_split(X_1,y,test_size=0.2,random_state= 123)
model = XGBRegressor()
model.fit(X_train,y_train)
y_val_predict = model.predict(X_val)
plt.title("额外添加特征：{}".format("十二酸乙酯\n2,6-二叔丁基-4-甲基苯酚"),size = 10,loc = "right")
plt.scatter(y_val,y_val_predict,color = "b",alpha = 0.5,s = 25)
slope, intercept, r_value, p_value, std_err = scipy.stats.linregress(y_val,y_val_predict)
print(slope,intercept)
plt.plot([0,24],[intercept,24*slope+intercept],color='navy',linestyle='-.', linewidth=1.5,alpha = 0.5)
plt.text(8,12, "y ={0:.5f}x +{0:.5f}".format(slope,intercept), rotation = 43,size = 10,\
        family = "fantasy", color = "r", style = "italic", weight = "light",\
        bbox = dict(facecolor = "b", alpha = 0.2))
plt.text(0, 22, "MSE:{0:.5f}".format(mean_squared_error(y_val,y_val_predict)), size = 12,\
        family = "fantasy", color = "r", style = "italic", weight = "light",\
        bbox = dict(facecolor = "b", alpha = 0.2))
plt.text(0, 18, "$\mathregular{R^2}$:0.98722", size = 12,\
        family = "fantasy", color = "r", style = "italic", weight = "light",\
        bbox = dict(facecolor = "b", alpha = 0.2))
plt.text(-2,26,"C",size = 15)
plt.ylim(-2,25)
ax1 = plt.subplot(2, 2, 4)
X_1 = df_full[list6[3]]
y = df_full[target]
X_train,X_val,y_train,y_val = train_test_split(X_1,y,test_size=0.2,random_state= 123)
model = XGBRegressor()
model.fit(X_train,y_train)
y_val_predict = model.predict(X_val)
plt.title("原特征",size = 10,loc = "right")
plt.scatter(y_val,y_val_predict,color = "b",alpha = 0.5,s = 25)
slope, intercept, r_value, p_value, std_err = scipy.stats.linregress(y_val,y_val_predict)
print(slope,intercept)
plt.plot([0,24],[intercept,24*slope+intercept],color='navy',linestyle='-.', linewidth=1.5,alpha = 0.5)
plt.text(8,12, "y ={0:.5f}x +{0:.5f}".format(slope,intercept), rotation = 43,size = 10,\
        family = "fantasy", color = "r", style = "italic", weight = "light",\
        bbox = dict(facecolor = "b", alpha = 0.2))
plt.text(0, 22, "MSE:{0:.5f}".format(mean_squared_error(y_val,y_val_predict)), size = 12,\
        family = "fantasy", color = "r", style = "italic", weight = "light",\
        bbox = dict(facecolor = "b", alpha = 0.2))
plt.text(0, 18, "$\mathregular{R^2}$:0.98725", size = 12,\
        family = "fantasy", color = "r", style = "italic", weight = "light",\
        bbox = dict(facecolor = "b", alpha = 0.2))
plt.text(-2,26,"D",size = 15)
plt.ylim(-2,25)
